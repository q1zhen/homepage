[["Map",1,2,9,10,86,87],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.2.5","content-config-digest","ad11f3a268675aad","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,33,34,47,48,72,73],"hello-world",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"rendered":21},{"external":14,"title":15,"description":16,"date":17},false,"Hello World (again)","How this website evolved to be what it is now.",["Date","2024-06-15T00:00:00.000Z"],"Welcome!\n\nAs you can see, I refactored the whole website again.\n\nThis is probably the fourth or fifth time I did it, and you might have seen some previous versions before. Those versions were mainly developed when I was still in middle school, attempting to create something fascinating using 2000s technology from scratch. And apparently, I failed to continue to maintain them.\n\n## Past attempts\n\nStarting from scratch using vanilla HTML was time-consuming, and the outcomes were never satisfying. There were always mispositioned images or buttons, and elements that glitched on mobile devices. It was also very inconvenient to add more content.\n\nThen, in consideration of the contents, I switched to blog frameworks like Jekyll and Hexo. At first, they were awesome. The beautiful pages appeared in minutes of work. However, when I tried to modify the themes a bit and add something in a layout I preferred, I gave up. I did not like to spend a lot of time reading others' code and understanding that just for modifying it and maybe adding a card or two. I did not have the time to make a nice theme from scratch either. So these attempts were also abandoned.\n\nFinally, I came to a minimalist design, still using vanilla HTML, but this time a single-page website with only a name card on it. It was quite successful. At least bugs no longer existed. The only problem was the inconvenience of adding more content; however, I was quite tied up last year, and that page just stayed there for about a year with no updates at all.\n\n## Refactoring using Astro\n\nRecently, I decided to refactor the whole thing and keep an easy-to-maintain and elegant website. I concluded that:\n- I do not need something designed for blog posts. I do not write blogs very often. Such frameworks and templates limit a lot.\n- I do not need fancy things that require lots of code either. There is still a need to make the process of updating the contents fast and easy; I may still write something on my website.\n\nSo I found [Astro](https://astro.build/). It is said to be the \"web framework for content-driven websites\". This is true: I finished everything you are looking at now within 2 hours. I just found a template, modified it a bit, and added content to it. I like the design, and it is also very modern. It uses TypeScript and Tailwind CSS, which is now quite familiar to me and is easy to get started.\n\nIt loads content from markdown files, and it is also easy to write things in HTML, which means that I could create heavy content like blog posts and some fancy stuff that may be used in the index page.\n\nAnd I also kept a blog section. I know that I am not going to write blogs very often, but just in case I want to write something, I still made one.\n\nI hope you enjoy the new website!","blog/hello-world.md","2822ef22257ac72e",{"html":22,"metadata":23},"\u003Cp>Welcome!\u003C/p>\n\u003Cp>As you can see, I refactored the whole website again.\u003C/p>\n\u003Cp>This is probably the fourth or fifth time I did it, and you might have seen some previous versions before. Those versions were mainly developed when I was still in middle school, attempting to create something fascinating using 2000s technology from scratch. And apparently, I failed to continue to maintain them.\u003C/p>\n\u003Ch2 id=\"past-attempts\">Past attempts\u003C/h2>\n\u003Cp>Starting from scratch using vanilla HTML was time-consuming, and the outcomes were never satisfying. There were always mispositioned images or buttons, and elements that glitched on mobile devices. It was also very inconvenient to add more content.\u003C/p>\n\u003Cp>Then, in consideration of the contents, I switched to blog frameworks like Jekyll and Hexo. At first, they were awesome. The beautiful pages appeared in minutes of work. However, when I tried to modify the themes a bit and add something in a layout I preferred, I gave up. I did not like to spend a lot of time reading others’ code and understanding that just for modifying it and maybe adding a card or two. I did not have the time to make a nice theme from scratch either. So these attempts were also abandoned.\u003C/p>\n\u003Cp>Finally, I came to a minimalist design, still using vanilla HTML, but this time a single-page website with only a name card on it. It was quite successful. At least bugs no longer existed. The only problem was the inconvenience of adding more content; however, I was quite tied up last year, and that page just stayed there for about a year with no updates at all.\u003C/p>\n\u003Ch2 id=\"refactoring-using-astro\">Refactoring using Astro\u003C/h2>\n\u003Cp>Recently, I decided to refactor the whole thing and keep an easy-to-maintain and elegant website. I concluded that:\u003C/p>\n\u003Cul>\n\u003Cli>I do not need something designed for blog posts. I do not write blogs very often. Such frameworks and templates limit a lot.\u003C/li>\n\u003Cli>I do not need fancy things that require lots of code either. There is still a need to make the process of updating the contents fast and easy; I may still write something on my website.\u003C/li>\n\u003C/ul>\n\u003Cp>So I found \u003Ca href=\"https://astro.build/\">Astro\u003C/a>. It is said to be the “web framework for content-driven websites”. This is true: I finished everything you are looking at now within 2 hours. I just found a template, modified it a bit, and added content to it. I like the design, and it is also very modern. It uses TypeScript and Tailwind CSS, which is now quite familiar to me and is easy to get started.\u003C/p>\n\u003Cp>It loads content from markdown files, and it is also easy to write things in HTML, which means that I could create heavy content like blog posts and some fancy stuff that may be used in the index page.\u003C/p>\n\u003Cp>And I also kept a blog section. I know that I am not going to write blogs very often, but just in case I want to write something, I still made one.\u003C/p>\n\u003Cp>I hope you enjoy the new website!\u003C/p>",{"headings":24,"imagePaths":32,"frontmatter":13},[25,29],{"depth":26,"slug":27,"text":28},2,"past-attempts","Past attempts",{"depth":26,"slug":30,"text":31},"refactoring-using-astro","Refactoring using Astro",[],"wsl-proxy",{"id":33,"data":35,"body":39,"filePath":40,"digest":41,"rendered":42},{"external":14,"title":36,"description":37,"date":38},"Enabling WSL to use Windows proxy","Connect WSL to local area network to use Windows proxy.",["Date","2024-12-13T00:00:00.000Z"],"The solution is rather simple. Edit `%USERPROFILE%\\.wslconfig` and enter:\r\n\r\n```ini\r\n[experimental]\r\nautoMemoryReclaim=gradual # gradual | dropcache | disabled\r\nnetworkingMode=mirrored\r\ndnsTunneling=true\r\nfirewall=true\r\nautoProxy=true\r\n```\r\n\r\nThen execute:\r\n\r\n```shell\r\nwsl --shutdown\r\n```\r\n\r\nWSL should then work as expected and use Windows' proxy.","blog/wsl-proxy.md","0337f51e791117b6",{"html":43,"metadata":44},"\u003Cp>The solution is rather simple. Edit \u003Ccode>%USERPROFILE%\\.wslconfig\u003C/code> and enter:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ini\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">[experimental]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">autoMemoryReclaim\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=gradual \u003C/span>\u003Cspan style=\"color:#6A737D\"># gradual | dropcache | disabled\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">networkingMode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=mirrored\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">dnsTunneling\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">firewall\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">autoProxy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then execute:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">wsl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --shutdown\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>WSL should then work as expected and use Windows’ proxy.\u003C/p>",{"headings":45,"imagePaths":46,"frontmatter":35},[],[],"enhancing-latex-compiling",{"id":47,"data":49,"body":53,"filePath":54,"assetImports":55,"digest":57,"rendered":58},{"external":14,"title":50,"description":51,"date":52},"Enhancing LaTeX Compilation Speed on Windows","Simple solution using WSL2.",["Date","2024-10-31T00:00:00.000Z"],"It is common knowledge that the file I/O efficiency of Linux generally outperforms that of Windows. This makes it extremely slow when one is compiling a regular (not even large) LaTeX file on Windows since LaTeX refers to LOTS OF small files during compilation.\r\n\r\nThis can be simply solved by using LaTeX from a Linux subsystem.\r\n\r\n## Configuring WSL2\r\n\r\n![Turn Windows features on or off](../src/assets/windows-features.png)\r\n\r\nFirst, type \"Turn Windows features on or off\" in taskbar search and check on \"Windows Subsystem for Linux\".\r\n\r\nAfter installing WSL, type the following command to make sure that the installation is successful:\r\n\r\n```sh\r\nwsl --version\r\n```\r\n\r\nIt should appear as a 2.x version.\r\n\r\nAfter that, install an Ubuntu distribution (the latest version should be fine):\r\n\r\n```sh\r\nwsl --install ubuntu\r\n```\r\n\r\nFollow the instructions to set up the username and password, and you should now be able to enter the subsystem via command `ubuntu`.\r\n\r\n## Installing TeX Live\r\n\r\nThe next step is to install TeX Live within the subsystem. The installation is rather simple:\r\n\r\n```sh\r\nsudo apt install texlive-full\r\n```\r\n\r\nThis would install all packages, including a lot of them that might not be useful (for example, a lot of packages specified for other languages). But since this is a very straightforward and easy way and only takes about 8GB of disk space, it should be acceptable.\r\n\r\nNow commands such as `latex`, `pdflatex`, `xelatex`, etc. should be available.\r\n\r\n## ... and finally using it\r\n\r\nThe best practice should be doing everything solely within the Linux system (or entirely in its file system). Anything from connecting to it via SSH from a terminal to connecting using the remote host feature in VS Code should be fine. This promises the maximum compilation speed possible.\r\n\r\nHowever, there are always cases that you would need to do compilation on files on Windows (like some preexisting projects). WSL mounts the whole Windows file system under `/mnt/[DRIVE]/...`. It is said that reading Windows files from WSL would be a lot slower, but as long as the compilation process takes place in the subsystem (where all small files are read), it still boosts the process. Still, this has no difference with dealing with files directly inside Linux on the user side. With all LaTeX commands available, plugins like LaTeX Workshop in VS Code should work properly.\r\n\r\nThrough testing, this makes it at least 5x faster than directly using the TeX Live on Windows, especially for XeLaTeX.","blog/enhancing-latex-compiling.md",[56],"../src/assets/windows-features.png","a583f063e6f578e2",{"html":59,"metadata":60},"\u003Cp>It is common knowledge that the file I/O efficiency of Linux generally outperforms that of Windows. This makes it extremely slow when one is compiling a regular (not even large) LaTeX file on Windows since LaTeX refers to LOTS OF small files during compilation.\u003C/p>\n\u003Cp>This can be simply solved by using LaTeX from a Linux subsystem.\u003C/p>\n\u003Ch2 id=\"configuring-wsl2\">Configuring WSL2\u003C/h2>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../src/assets/windows-features.png&#x22;,&#x22;alt&#x22;:&#x22;Turn Windows features on or off&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>First, type “Turn Windows features on or off” in taskbar search and check on “Windows Subsystem for Linux”.\u003C/p>\n\u003Cp>After installing WSL, type the following command to make sure that the installation is successful:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">wsl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --version\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>It should appear as a 2.x version.\u003C/p>\n\u003Cp>After that, install an Ubuntu distribution (the latest version should be fine):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">wsl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ubuntu\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Follow the instructions to set up the username and password, and you should now be able to enter the subsystem via command \u003Ccode>ubuntu\u003C/code>.\u003C/p>\n\u003Ch2 id=\"installing-tex-live\">Installing TeX Live\u003C/h2>\n\u003Cp>The next step is to install TeX Live within the subsystem. The installation is rather simple:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> apt\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> texlive-full\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This would install all packages, including a lot of them that might not be useful (for example, a lot of packages specified for other languages). But since this is a very straightforward and easy way and only takes about 8GB of disk space, it should be acceptable.\u003C/p>\n\u003Cp>Now commands such as \u003Ccode>latex\u003C/code>, \u003Ccode>pdflatex\u003C/code>, \u003Ccode>xelatex\u003C/code>, etc. should be available.\u003C/p>\n\u003Ch2 id=\"-and-finally-using-it\">… and finally using it\u003C/h2>\n\u003Cp>The best practice should be doing everything solely within the Linux system (or entirely in its file system). Anything from connecting to it via SSH from a terminal to connecting using the remote host feature in VS Code should be fine. This promises the maximum compilation speed possible.\u003C/p>\n\u003Cp>However, there are always cases that you would need to do compilation on files on Windows (like some preexisting projects). WSL mounts the whole Windows file system under \u003Ccode>/mnt/[DRIVE]/...\u003C/code>. It is said that reading Windows files from WSL would be a lot slower, but as long as the compilation process takes place in the subsystem (where all small files are read), it still boosts the process. Still, this has no difference with dealing with files directly inside Linux on the user side. With all LaTeX commands available, plugins like LaTeX Workshop in VS Code should work properly.\u003C/p>\n\u003Cp>Through testing, this makes it at least 5x faster than directly using the TeX Live on Windows, especially for XeLaTeX.\u003C/p>",{"headings":61,"imagePaths":71,"frontmatter":49},[62,65,68],{"depth":26,"slug":63,"text":64},"configuring-wsl2","Configuring WSL2",{"depth":26,"slug":66,"text":67},"installing-tex-live","Installing TeX Live",{"depth":26,"slug":69,"text":70},"-and-finally-using-it","… and finally using it",[56],"yet-another-hello-world",{"id":72,"data":74,"body":78,"filePath":79,"digest":80,"rendered":81},{"external":14,"title":75,"description":76,"date":77},"Yet another Hello World","An attempt to make this site lightweight.",["Date","2025-03-02T00:00:00.000Z"],"Yep, another refactor here.\r\n\r\nYou have probably seen [my blog post introducing the last refactor](/blog/hello-world) around six months ago. That was the time when I started to use the [Astro](https://astro.build) framework and picked a random template on its official website. It looked nice and was just like any other website that heavily relies on a template.\r\n\r\nI was not feeling anything wrong about it until I heard that my friend started to build [his own website](https://kekkan.org/), and his solution was definitely a shock to me. He is a tech purist, and he decided to develop his own XML standard and render the whole site using XSML just because he does not like HTML. The whole thing is transformed to some vanilla HTML with a few lines of CSS. And the outcome looks nice. He made his site super-lightweight.\r\n\r\nSo I started to inspect my website, and I found that it had been way too bloated: I had a whole bundle of Tailwind CSS that probably 10% is being used; there was probably a Vue.js or React.js or whatsoever framework referenced by some random component deep down within the template; a whole Font Awesome was included just for a small GitHub icon that appeared once on the page. Compared with my friend's website, the whole thing just seemed to be erroneous.\r\n\r\nApparently, I am not so geek-ish as he is. I do not feel like maintaining a whole set of standards and formats just for a couple of my blog posts on trivial content. At the same time, I still wished to have the contents updated with ease.\r\n\r\nI continued to use Astro: it is just a static content generator that does no harm, and it is the template that needs a refactor. My wish is to produce some near-vanilla HTML output on the client's side and continue using the easily-maintained Markdown content managing in my Git repository. No external CSS (except for web fonts) is being used. No random JavaScript libraries. I wrote the stylesheet for every component on my own, and Astro compiles and compresses them together for me.\r\n\r\nThis is quite a minimalistic design that I am satisfied with. I got most of my inspirations on the design from [motherf**kingwebsite.com](https://motherfuckingwebsite.com/), some work by [Kenya Hara](https://en.wikipedia.org/wiki/Kenya_Hara), [NYC Subway signs](https://transitgifts.com/collections/new-york-subway-signs), the Astro template I previously used, [some MUJI posters](https://www.muji.com/hk-en/event/poster_display/), the design of MoMA, and the appearance of some Christian Churches in Hong Kong. I love modern designs.\r\n\r\nThe whole thing was made within a Saturday afternoon. I was not intentionally making a responsive design as I was only testing on a desktop device, but it still somehow looks great on most mobile devices.\r\n\r\nFor the choice on fonts, I used Vercel's [Geist](https://vercel.com/font) font (also currently my favorite sans-serif font) for most of the texts, [Rubik](https://fonts.google.com/specimen/Rubik) and [Rubki Mono One](https://fonts.google.com/specimen/Rubik+Mono+One) for headings and parts I want to make stylistic. All of them are hosted over Google Fonts, the only external contents I am using. These add roughly 100kB~150kB (depending on the number of fonts used in the page) extra load on network resources, which I think is acceptable.\r\n\r\nFor better visual effects, I also added a `ClientRouter`, provided by Astro, that allows seamless transitions when clicking on links. This is simple by adding the `transition:animate` attribute on the element:\r\n\r\n```html\r\n\u003CLayoutBase>\r\n\t\u003Cslot slot=\"meta\" name=\"meta\" />\r\n\t\u003CNav slot=\"header\" />\r\n\t\u003Cdiv id=\"main-container\" slot=\"main\" transition:animate=\"slide\">\r\n\t\t\u003Cslot name=\"main\" />\r\n\t\u003C/div>\r\n\t\u003CFooter slot=\"footer\" />\r\n\u003C/LayoutBase>\r\n```\r\n\r\nThe extra CSS and JavaScript add approximately 10kB. The content of the HTML page is also roughly 10kB. Summing them up, for pages without images, the size can be kept under 200kB. This is perfect (and even outperforms my friend's since he uses heavier fonts) for me.\r\n\r\nNo idea why I decided to spend almost a whole day on all these things, but it just feels so good to see the outcomes. Especially that they look great and are super lightweight at the same time.","blog/yet-another-hello-world.md","4a557c3a1970b7ed",{"html":82,"metadata":83},"\u003Cp>Yep, another refactor here.\u003C/p>\n\u003Cp>You have probably seen \u003Ca href=\"/blog/hello-world\">my blog post introducing the last refactor\u003C/a> around six months ago. That was the time when I started to use the \u003Ca href=\"https://astro.build\">Astro\u003C/a> framework and picked a random template on its official website. It looked nice and was just like any other website that heavily relies on a template.\u003C/p>\n\u003Cp>I was not feeling anything wrong about it until I heard that my friend started to build \u003Ca href=\"https://kekkan.org/\">his own website\u003C/a>, and his solution was definitely a shock to me. He is a tech purist, and he decided to develop his own XML standard and render the whole site using XSML just because he does not like HTML. The whole thing is transformed to some vanilla HTML with a few lines of CSS. And the outcome looks nice. He made his site super-lightweight.\u003C/p>\n\u003Cp>So I started to inspect my website, and I found that it had been way too bloated: I had a whole bundle of Tailwind CSS that probably 10% is being used; there was probably a Vue.js or React.js or whatsoever framework referenced by some random component deep down within the template; a whole Font Awesome was included just for a small GitHub icon that appeared once on the page. Compared with my friend’s website, the whole thing just seemed to be erroneous.\u003C/p>\n\u003Cp>Apparently, I am not so geek-ish as he is. I do not feel like maintaining a whole set of standards and formats just for a couple of my blog posts on trivial content. At the same time, I still wished to have the contents updated with ease.\u003C/p>\n\u003Cp>I continued to use Astro: it is just a static content generator that does no harm, and it is the template that needs a refactor. My wish is to produce some near-vanilla HTML output on the client’s side and continue using the easily-maintained Markdown content managing in my Git repository. No external CSS (except for web fonts) is being used. No random JavaScript libraries. I wrote the stylesheet for every component on my own, and Astro compiles and compresses them together for me.\u003C/p>\n\u003Cp>This is quite a minimalistic design that I am satisfied with. I got most of my inspirations on the design from \u003Ca href=\"https://motherfuckingwebsite.com/\">motherf**kingwebsite.com\u003C/a>, some work by \u003Ca href=\"https://en.wikipedia.org/wiki/Kenya_Hara\">Kenya Hara\u003C/a>, \u003Ca href=\"https://transitgifts.com/collections/new-york-subway-signs\">NYC Subway signs\u003C/a>, the Astro template I previously used, \u003Ca href=\"https://www.muji.com/hk-en/event/poster_display/\">some MUJI posters\u003C/a>, the design of MoMA, and the appearance of some Christian Churches in Hong Kong. I love modern designs.\u003C/p>\n\u003Cp>The whole thing was made within a Saturday afternoon. I was not intentionally making a responsive design as I was only testing on a desktop device, but it still somehow looks great on most mobile devices.\u003C/p>\n\u003Cp>For the choice on fonts, I used Vercel’s \u003Ca href=\"https://vercel.com/font\">Geist\u003C/a> font (also currently my favorite sans-serif font) for most of the texts, \u003Ca href=\"https://fonts.google.com/specimen/Rubik\">Rubik\u003C/a> and \u003Ca href=\"https://fonts.google.com/specimen/Rubik+Mono+One\">Rubki Mono One\u003C/a> for headings and parts I want to make stylistic. All of them are hosted over Google Fonts, the only external contents I am using. These add roughly 100kB~150kB (depending on the number of fonts used in the page) extra load on network resources, which I think is acceptable.\u003C/p>\n\u003Cp>For better visual effects, I also added a \u003Ccode>ClientRouter\u003C/code>, provided by Astro, that allows seamless transitions when clicking on links. This is simple by adding the \u003Ccode>transition:animate\u003C/code> attribute on the element:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">LayoutBase\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">slot\u003C/span>\u003Cspan style=\"color:#B392F0\"> slot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"meta\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"meta\"\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\"> /\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">Nav\u003C/span>\u003Cspan style=\"color:#B392F0\"> slot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"header\"\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\"> /\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"main-container\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> slot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"main\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> transition:animate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"slide\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">slot\u003C/span>\u003Cspan style=\"color:#B392F0\"> name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"main\"\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\"> /\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">Footer\u003C/span>\u003Cspan style=\"color:#B392F0\"> slot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"footer\"\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\"> /\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">LayoutBase\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The extra CSS and JavaScript add approximately 10kB. The content of the HTML page is also roughly 10kB. Summing them up, for pages without images, the size can be kept under 200kB. This is perfect (and even outperforms my friend’s since he uses heavier fonts) for me.\u003C/p>\n\u003Cp>No idea why I decided to spend almost a whole day on all these things, but it just feels so good to see the outcomes. Especially that they look great and are super lightweight at the same time.\u003C/p>",{"headings":84,"imagePaths":85,"frontmatter":74},[],[],"projects",["Map",88,89,102,103,115,116,128,129,142,143,155,156,168,169],"cas-helper",{"id":88,"data":90,"filePath":95,"digest":96,"rendered":97},{"title":91,"description":92,"date":93,"url":94},"CAS Helper","For entertainment only. (bruh)",["Date","2024-01-05T00:00:00.000Z"],"https://cas.23-1.cn","projects/cas-helper.md","d5b1fe2697900c4c",{"html":98,"metadata":99},"",{"headings":100,"imagePaths":101,"frontmatter":90},[],[],"electron-youdao",{"id":102,"data":104,"filePath":109,"digest":110,"rendered":111},{"title":105,"description":106,"date":107,"url":108},"Electron Youdao Client","An elegant and lightweight user-interface for Youdao web dictionary.",["Date","2023-12-17T00:00:00.000Z"],"https://github.com/q1zhen/electron-youdao","projects/electron-youdao.md","90f031e70377aa6a",{"html":98,"metadata":112},{"headings":113,"imagePaths":114,"frontmatter":104},[],[],"enspire",{"id":115,"data":117,"filePath":122,"digest":123,"rendered":124},{"title":118,"description":119,"date":120,"url":121},"Enspire [ongoing]","Make CAS great again. This project is affiliated to Computerization.",["Date","2024-02-26T00:00:00.000Z"],"https://github.com/Computerization/Enspire","projects/enspire.md","6b8b98cc19908b15",{"html":98,"metadata":125},{"headings":126,"imagePaths":127,"frontmatter":117},[],[],"draft-project",{"id":128,"data":130,"filePath":136,"digest":137,"rendered":138},{"draft":131,"title":132,"description":133,"date":134,"url":135},true,"Draft link","This link is a draft and won't be built.",["Date","2022-02-22T00:00:00.000Z"],"https://abc.xyz","projects/draft-project.md","7e046d346055822b",{"html":98,"metadata":139},{"headings":140,"imagePaths":141,"frontmatter":130},[],[],"exam4calc",{"id":142,"data":144,"filePath":149,"digest":150,"rendered":151},{"title":145,"description":146,"date":147,"url":148},"Exam 4 Grade Calculator","See how many points you need in exam 4 to achieve a specific overall semester grade.",["Date","2024-01-02T00:00:00.000Z"],"https://exam4calc.qizhen-yang.cn/","projects/exam4calc.md","b0c05690518ba823",{"html":98,"metadata":152},{"headings":153,"imagePaths":154,"frontmatter":144},[],[],"gpt-translator",{"id":155,"data":157,"filePath":162,"digest":163,"rendered":164},{"title":158,"description":159,"date":160,"url":161},"GPT-3.5-based Translator","... a nice and accurate one.",["Date","2023-03-25T00:00:00.000Z"],"https://translate.qizhen-yang.cn","projects/gpt-translator.md","310e9796a657e59e",{"html":98,"metadata":165},{"headings":166,"imagePaths":167,"frontmatter":157},[],[],"ineq-solver",{"id":168,"data":170,"filePath":175,"digest":176,"rendered":177},{"title":171,"description":172,"date":173,"url":174},"Inequality Solver","Comparing π or e with any rational number by constructing definite integrals.",["Date","2024-09-05T00:00:00.000Z"],"https://github.com/q1zhen/ineq-solver","projects/ineq-solver.md","81b5a20182722cf6",{"html":98,"metadata":178},{"headings":179,"imagePaths":180,"frontmatter":170},[],[]]